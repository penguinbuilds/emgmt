services:
  db:
    image: postgres:17.5-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fastapi-app-network

  migrate:
    image: fastapi-app-01  # Use any app image with alembic installed
    container_name: migration
    command: alembic upgrade head
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - fastapi-app-network

  app1:
    image: fastapi-app-01
    container_name: fastapi-app-01
    ports:
      - "8001:8000"
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - fastapi-app-network

  app2:
    image: fastapi-app-02
    container_name: fastapi-app-02
    ports:
      - "8002:8000"
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - fastapi-app-network

  app3:
    image: fastapi-app-03
    container_name: fastapi-app-03
    ports:
      - "8003:8000"
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - fastapi-app-network

  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx_proxy
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #     - "8000:80"
  #   depends_on:
  #     - app1
  #     - app2
  #     - app3
  #   networks:
  #     - fastapi-app-network

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs:ro
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - fastapi-app-network

  redis:
    container_name: redis
    image: redis:7.2.5-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    networks:
      - fastapi-app-network

  celery_worker:
    container_name: celery_worker
    build: .
    command: celery -A src.emgmt.celery.celery worker --loglevel=info
    depends_on:
      - app1
      - app2
      - app3
      - redis
    networks:
      - fastapi-app-network

  flower:
    container_name: flower
    build: .
    command: celery -A src.emgmt.celery.celery flower --port=5555
    ports:
      - "5556:5555"
    depends_on:
      - app1
      - app2
      - app3
      - redis
      - celery_worker
    networks:
      - fastapi-app-network

networks:
  fastapi-app-network:
    driver: bridge
